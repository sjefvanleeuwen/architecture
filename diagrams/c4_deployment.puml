@startuml C4_Deployment
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

LAYOUT_WITH_LEGEND()

title Deployment diagram for Example System

Deployment_Node(clientDevice, "Client Device", "Computer or Mobile") {
    Deployment_Node(browser, "Web Browser", "Modern Browsers") {
        Container(webAppInstance, "Web Application", "Web Framework", "Provides functionality to users via web interface")
    }
    Deployment_Node(mobileRuntime, "Mobile App", "Mobile OS") {
        Container(mobileAppInstance, "Mobile App", "Mobile Framework", "Provides functionality to users via mobile")
    }
}

Deployment_Node(cloudInfrastructure, "Cloud Infrastructure", "Cloud Provider") {
    Deployment_Node(apiManagement, "API Management", "API Management Service") {
        Container(apiGatewayInstance, "API Gateway", "Gateway Technology", "Routes requests to appropriate services")
    }
    Deployment_Node(appServices, "Application Services", "Compute Resources") {
        Deployment_Node(apiService, "API Service", "Hosting Environment") {
            Container(apiLayerInstance, "API Layer", "API Technology", "Provides unified API for clients")
        }
        Deployment_Node(authService, "Authentication Service", "Hosting Environment") {
            Container(authServiceInstance, "Authentication Service", "Auth Technology", "Handles user authentication and authorization")
        }
        Deployment_Node(businessService, "Business Service", "Hosting Environment") {
            Container(coreServiceInstance, "Core Service", "Service Technology", "Implements core business logic")
        }
    }
    Deployment_Node(messagingService, "Messaging Service", "Message Broker") {
        Container(messageBusInstance, "Message Bus", "Messaging Technology", "Handles asynchronous communication between services")
    }
    Deployment_Node(dataStorage, "Data Storage", "Database Cluster") {
        Deployment_Node(primaryRegion, "Primary Region", "Region A") {
            ContainerDb(dbPrimaryInstance, "Database", "Database Technology", "Primary data storage")
        }
        Deployment_Node(secondaryRegion, "Secondary Region", "Region B") {
            ContainerDb(dbSecondaryInstance, "Database Replica", "Database Technology", "Read replica")
        }
    }
    Deployment_Node(monitoring, "Monitoring Service", "Monitoring Platform") {
        Container(monitoringInstance, "Monitoring Tool", "Monitoring Technology", "System monitoring and analytics")
    }
}

Deployment_Node(externalSystems, "External Systems", "Third Party") {
    System_Ext(externalSystemA, "External System A", "Provides supporting service A")
    System_Ext(externalSystemB, "External System B", "Provides supporting service B")
}

Rel(webAppInstance, apiLayerInstance, "Calls API on", "HTTPS")
Rel(mobileAppInstance, apiLayerInstance, "Calls API on", "HTTPS")
Rel(apiGatewayInstance, apiLayerInstance, "Routes requests to")
Rel(apiLayerInstance, coreServiceInstance, "Calls")
Rel(apiLayerInstance, authServiceInstance, "Authenticates with")
Rel(coreServiceInstance, dbPrimaryInstance, "Reads from and writes to")
Rel(coreServiceInstance, messageBusInstance, "Publishes messages to")
Rel(messageBusInstance, externalSystemA, "Triggers events in")
Rel(coreServiceInstance, externalSystemB, "Integrates with")
Rel(dbPrimaryInstance, dbSecondaryInstance, "Replicates to")

@enduml
